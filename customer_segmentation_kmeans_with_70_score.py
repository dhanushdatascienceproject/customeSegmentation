# -*- coding: utf-8 -*-
"""Customer-Segmentation KMeans with 70% score

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/customer-segmentation-kmeans-with-70-score-f7abff1e-1f84-4e51-9350-ddcdb198a849.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240820/auto/storage/goog4_request%26X-Goog-Date%3D20240820T153223Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D49429129f5ef3be6a507b53bb70477c216ee2db713e381a4e1331c217854ca28dd52c6c2d6ec3e9292b9ec634c4f654ba450aaaf0d1c7a85f41128c3ca6be1c2510da42b8a46e914f357b3bc8fd43099e545f6c550551d11116c501eb514d90745ffb0b435177b6e525e60ab6191b7a734f29cdabe396ec66b09cb97c2964a52fb88732f1861f6fcc64843300125da3b9ea32d5682feb90c9d6b661ef25da365ad0ac2f3e9c1f28aef3da3a6e7315065d1685f6dedf5020db140dcfe35f5356eecd0253958428f7e0d4b219f0729ae042cd7fa1bf13db535986f3c3764557c11d3c7286789f665b6d9670341d868dc4f0c8e69cea74cdf01fb10dcbe4219bc09

### Importing Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score, accuracy_score
from sklearn.preprocessing import StandardScaler, LabelEncoder
import warnings
warnings.filterwarnings('ignore')

"""### Load and Preprocess the Data"""

data = pd.read_excel('/content/Online Retail.xlsx')

display(data.head())

display(data.tail())

data.info()

data.describe()

data.value_counts().sum()

"""##### Drop Unnecessary Values"""

data = data.drop(columns=['InvoiceNo', 'CustomerID', 'InvoiceDate', 'Description', 'StockCode'], axis=1)

# Checking the Data
display(data.head())

"""##### Handling Missing Values"""

data.isnull().sum()

"""##### Checking Duplicates"""

data.duplicated().sum()

# Dropping Duplicates

data = data.drop_duplicates()

#Checking Again
data.duplicated().sum()

"""### Label Encoder"""

le = LabelEncoder()

data['Country'] = le.fit_transform(data['Country'])

data['Country'].head()

"""### Standard Scaler"""

scaler = StandardScaler()
data_scaled = scaler.fit_transform(data)

data_scaled

"""### Apply K-Means for Various K-Values"""

inertia_values = []
silhouette_scores = []
k_range = range(2,11)

for K in k_range:
    kmeans = KMeans(n_clusters=K, random_state=42)
    kmeans.fit(data_scaled)

    # Inertia
    inertia_values.append(kmeans.inertia_)

    # SIlhoutte Score
    silhouette = silhouette_score(data_scaled, kmeans.labels_)
    silhouette_scores.append(silhouette)

"""### Elbow Method"""

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(k_range, inertia_values, marker='o', linestyle='-')
plt.xlabel('Number of Clusters (K)')
plt.ylabel('Inertia (Within-cluster Sum of Squares)')
plt.title('Elbow Method')
plt.show()

"""### Silhoutte Score"""

plt.subplot(1, 2, 2)
plt.plot(k_range, silhouette_scores, marker='o', linestyle='-')
plt.xlabel('Number of Clusters (K)')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Score')
plt.show()

print(f"Silhouette score: {silhouette:.2f}")

